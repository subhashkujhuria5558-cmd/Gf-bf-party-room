const express = require('express');
const mongoose = require('mongoose');
const jwt = require('jsonwebtoken');
const cors = require('cors');
const bodyParser = require('body-parser');
const app = express();

const PORT = process.env.PORT || 5000;

// Yahan aapka REAL MONGODB URI & JWT SECRET direct code me aagaya hai:
const MONGODB_URI = "mongodb+srv://subhashkujhuria5558_db_user:Ywvjtk95zXIdtpGb@cluster0.3bcvs3w.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
const JWT_SECRET = "uY7$kd9sPQw!zX@4eF1#Lm8H&Tr3nBv0xZaR6WqTjN2oLg";

app.use(cors());
app.use(bodyParser.json());

// Connect to MongoDB
mongoose.connect(MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('MongoDB connected'))
    .catch(e => console.log(e));

// --- Rest code below remains SAME as last answer, all functional ---

// User Schema
const userSchema = new mongoose.Schema({
    username: String,
    email: String,
    passwordHash: String,
    roles: [String],
    balance: Number,
    chips: Number,
    isBlocked: Boolean,
    createdAt: { type: Date, default: Date.now }
});

const User = mongoose.model('User', userSchema);

function authenticateToken(req, res, next) {
    const token = req.headers['authorization']?.split(' ')[1];
    if (!token) return res.status(401).json({ message: 'Token missing' });

    jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) return res.status(403).json({ message: 'Invalid token' });
        req.user = user;
        next();
    });
}

// --- ROUTES SAME AS BEFORE ---

// Register User
app.post('/api/auth/register', async (req, res) => {
    try {
        const { username, email, passwordHash } = req.body;
        const user = new User({ username, email, passwordHash, roles: ['user'], balance: 0, chips: 0, isBlocked: false });
        await user.save();
        res.json({ message: 'User registered' });
    } catch (err) {
        res.status(500).json({ message: 'Registration error' });
    }
});

// Login User
app.post('/api/auth/login', async (req, res) => {
    try {
        const { email, passwordHash } = req.body;
        const user = await User.findOne({ email, passwordHash });
        if (!user) return res.status(401).json({ message: 'Invalid credentials' });
        if (user.isBlocked) return res.status(403).json({ message: 'User blocked' });

        const token = jwt.sign({ id: user._id, roles: user.roles }, JWT_SECRET, { expiresIn: '1d' });
        res.json({ token, username: user.username, roles: user.roles, balance: user.balance, chips: user.chips });
    } catch (err) {
        res.status(500).json({ message: 'Login error' });
    }
});

// Get Logged User Profile
app.get('/api/user/profile', authenticateToken, async (req, res) => {
    try {
        const user = await User.findById(req.user.id);
        res.json({ username: user.username, balance: user.balance, chips: user.chips, roles: user.roles });
    } catch (err) {
        res.status(500).json({ message: 'Profile fetch error' });
    }
});

// Admin: Get all users
app.get('/api/admin/users', authenticateToken, async (req, res) => {
    if (!req.user.roles.includes('admin')) return res.status(403).json({ message: 'Forbidden' });
    const users = await User.find();
    res.json(users);
});

// Server start
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});
